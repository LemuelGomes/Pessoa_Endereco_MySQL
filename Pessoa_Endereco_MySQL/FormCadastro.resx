<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAABwYGiQcHBvYJCAf3CQgH9wkIB/cJCAf3CQgH9wkIB/cJCAf3CQgH9wkIB/cJCAf3CQgH9wkI
        B/cJCAf3CQgH9wkIB/cJCAf3CQkH9wwLCfoODQv6OjQsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAUGBgXz9ObA//7vyP/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7v
        yP/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//ubA/9y9m/8fGxf4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACgsKCe/+78j/9ufC/5GJc/+Hf2v/h39r/6KZgP/+78j//u/I//7v
        yP/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7vyP/+6MD/8tCr/wUEBP4QCgXcDwkEjAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCwoJ7/7vyP+onoX/KCUd/wkIBv9VTTv/GBYS/9zP
        rf/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7owP/y0Kv/AAAA/6Zr
        MP8ZEQfxAAAAKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoLCgnv/u/I/6GYf/8KCQf/GhcS/yon
        Hv8lIhv/1cmo/5eOd/9VUEP/VVBD/1VQQ/9VUEP/VVBD/1VQQ/9VUEP/VVBD/1VQQ/9XUkT/69ey//LQ
        q/8AAAD/w384/zEgD+0AAAA7AAAAAAAAAAAAAABMAAAAFwAAAAAAAAAAAAAACgsKCe/+78j/oZh//xMR
        Df+llnT/UEk4/wAAAP/Vyaj/3tGv/7qvk/+6r5P/uq+T/7qvk/+6r5P/uq+T/7qvk/+6r5P/uq+T/8C1
        l//85r7/8tCr/wAAAP/Dfzj/MSAP7QAAADsAAAAAAAAANwgIC/4fHynOAAAAAAAAAAAAAAAAeXJhkf7v
        yP/JvZ7/DAsJ/w4NC/8NDAr/CAgG/1ZRQ//77Mb//u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7v
        yP/+78j//u/I//7owP/y0Kv/AAAA/8N/OP8xIA/tAAAAOwAAAAAaGiHSdXWj/xwcJf0AAAAvAAAAAAAA
        AACsool7/u/I//7vyP/36MP/7d+7/+3fu//46cP/YlxN/8e7nf/+78j//u/I//7vyP/+78j//u/I//7v
        yP/+78j//u/I//7vyP/+78j//ujA//LQq/8AAAD/w384/zEgD+0AAAA7AAAANxYWG/yfn9b/XFyB/yEh
        K9AAAAAAAAAACQwLCu7+78j/9efB/7uwk/+6r5P/uq+T/7qvk/+6r5P/uq+T/7qvk/+6r5P/uq+T/7qv
        k/+6r5P/uq+T/7qvk/+6r5P/uq+T/8C1l//85r7/8tCr/wAAAP/Dfzj/MSAP7QAAADsGBhagDQ0b/RUV
        LP0UFCz+AgIF/gAAAAgAAAAKCwoJ7/7vyP/QxKT/VVBD/1VQQ/9VUEP/VVBD/1VQQ/9VUEP/VVBD/1VQ
        Q/9VUEP/VVBD/1VQQ/9VUEP/VVBD/1VQQ/9VUEP/V1JE/+vXsv/y0Kv/AAAA/8N/OP8xIA/tAAAAOwYG
        HagfH4n/MDDV/ywsyv8EBBT9AAAACgAAAAoLCgnv/u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7v
        yP/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//u/I//7vyP/+78j//ujA//LQq/8AAAD/w384/zEg
        D+0AAAA7BgYdqB8fif8wMNX/LCzK/wQEFP0AAAAKAAAACgsKCe/+78j/2Muq/2dhUf9mYFD/ZmBQ/2Zg
        UP9mYFD/ZmBQ/2ZgUP9mYFD/ZmBQ/2ZgUP9mYFD/ZmBQ/2ZgUP9mYFD/ZmBQ/2tkVP/u2bT/8tCr/wAA
        AP/Dfzj/MSAP7QAAADsGBh2oHx+J/zAw1f8sLMr/BAQU/QAAAAoAAAAKCwoJ7/7vyP/t37v/qZ+F/6mf
        hf+pn4X/qZ+F/6mfhf+pn4X/qZ+F/6mfhf+pn4X/qZ+F/6mfhf+pn4X/qZ+F/6mfhf+pn4X/rKKI//nj
        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
        PMIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgsKCe/+78j/uK2R/yIjJP9UW2P/VFtj/1Rb
        Y/9UW2P/VFtj/1RbY/9UW2P/VFtj/xUVFP/s3rr//u/I//7vyP/+78j//u/I//7vyP/+6MD/8tCr/wAA
        AP/Dfzj/Wjsa4AAAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCwoJ7/7vyP/+78j/v7SX/6mf
        hf+pn4X/qZ+F/6mfhf+pn4X/qZ+F/6mfhf+pn4X/0sal//7vyP/+78j//u/I//7vyP/+78j//u/I//7o
        wP/y0Kv/AAAA/8N/OP8xIA/tAAAAOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGBQTzz8Oj/9zP
        rf/cz63/3M+t/9zPrf/cz63/3M+t/9zPrf/cz63/3M+t/9zPrf/cz63/3M+t/9zPrf/cz63/3M+t/9zP
        rf/cz63/3Mem/7iegv8FBAP+yoM6/zEgD+0AAAA7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMD
        A2ESEQ7YBwYE9hsTCfYiGA30IhgN9CIYDfQiGA30IhgN9CIYDfQiGA30IhgN9CIYDfQiGA30IhgN9CIY
        DfQiGA30IhgN9CQZDvQnHhT3KiEW931TJ/rQhzz/MSAP7QAAADsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAASDAW6jVwp/9CHPP/Qhzz/0Ic8/9CHPP/Qhzz/0Ic8/9CHPP/Qhzz/0Ic8/9CH
        PP/Qhzz/0Ic8/9CHPP/Qhzz/0Ic8/9CHPP/Qhzz/0Ic8/86GPP8jFwvwAAAAMgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8KBgLwBwUC9wcFAvcHBQL3BwUC9wcFAvcHBQL3BwUC9wcF
        AvcHBQL3BwUC9wcFAvcHBQL3BwUC9wcFAvcHBQL3BwUC9wcFAvcHBQL3BgQC+A8JBL0AAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAB/wAAAf8AAAB/AAAAPwAAADMAAAAjgAAAIYAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA/AAAAPwAA
        AH8AAAA/AAAAPwAAAD+AAAA/4AAAP+AAAD8=
</value>
  </data>
</root>